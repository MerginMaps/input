name: Android
on:
  push:
    paths:
    - 'app/**'
    - 'core/**'
    - 'scripts/**'
    - 'cmake/**'
    - 'CMakeLists.txt'
    - '.github/workflows/android.yml'

  release:
    types:
      - published

concurrency:
  group: ci-${{github.ref}}-android
  cancel-in-progress: true

jobs:
  android_build:
    if: ( github.repository == 'MerginMaps/input' ) && (!contains(github.event.head_commit.message, 'Translate '))
    runs-on: macos-11
    env:
      QT_VERSION: '6.4.1'
      ANDROIDAPI: 24
      ANDROID_NDK_PLATFORM: android-24
      NDK_VERSION: r23
      NDK_VERSION_FULL: r23b
      JDK_VERSION: 11
      SDK_PLATFORM: android-31
      SDK_BUILD_TOOLS: 31.0.0
      INPUT_SDK_VERSION: android-macOS-20221117-129
      CCACHE_DIR: /Users/runner/work/ccache
      GITHUB_TOKEN: ${{ secrets.INPUTAPP_BOT_GITHUB_TOKEN }}
      INPUTKEYSTORE_STOREPASS: ${{ secrets.INPUTKEYSTORE_STOREPASS }}
      CACHE_VERSION: 0

    steps:
      - uses: actions/checkout@v2

      # CCache
      - name: Prepare build cache for pull request
        uses: pat-s/always-upload-cache@v2.1.5
        if: github.event_name == 'pull_request'
        with:
          path: ${{ env.CCACHE_DIR }}
          key: build-android-ccache-${{ github.actor }}-${{ github.head_ref }}-${{ github.sha }}
          # The head_ref or source branch of the pull request in a workflow run.
          # The base_ref or target branch of the pull request in a workflow run.
          restore-keys: |
            build-android-ccache-${{ github.actor }}-${{ github.head_ref }}-
            build-android-ccache-refs/heads/${{ github.base_ref }}-
            build-android-ccache-refs/heads/master-

      - name: Prepare build cache for branch/tag
        # use a fork of actions/cache@v2 to upload cache even when the build or test failed
        uses: pat-s/always-upload-cache@v2.1.5
        if: github.event_name != 'pull_request'
        with:
          path: ${{ env.CCACHE_DIR }}
          # The branch or tag ref that triggered the workflow run. For branches this in the format refs/heads/<branch_name>, and for tags it is refs/tags/<tag_name>
          key: build-android-ccache-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            build-android-ccache-${{ github.ref }}-
            build-android-ccache-refs/heads/master-

      - name: Install ccache
        run: |
          mkdir -p ${CCACHE_DIR}
          brew install ccache
          ccache --set-config=max_size=2.0G
          ccache -s

      - name: Install Build Dependencies
        run: |
          brew install bison flex automake shtool gtk-doc
          echo "/usr/local/opt/flex/bin" >> $GITHUB_PATH
          echo "/usr/local/opt/bison/bin" >> $GITHUB_PATH
          brew install gnupg
          brew install openssl@1.1
          pip3 install -U pip
          pip3 install aqtinstall
          
          if  [[ ${{ github.ref }} == refs/tags/* ]]
          then
              export GIT_TAG="${GITHUB_REF//refs\/tags\//}"
              export GIT_BRANCH=""
          else
              export GIT_TAG=""
              export GIT_BRANCH="${GITHUB_REF//refs\/heads\//}"
          fi
          echo "GIT_TAG: $GIT_TAG"
          echo "GIT_BRANCH: $GIT_BRANCH"
          echo "GIT_TAG=$GIT_TAG" >> $GITHUB_ENV
          echo "GIT_BRANCH=$GIT_BRANCH" >> $GITHUB_ENV

      - name: Cache Qt
        id: cache-qt
        uses: pat-s/always-upload-cache@v2.1.5
        with:
          path: ${{ github.workspace }}/Qt
          key: ${{ runner.os }}-QtCache-v0-${{ env.QT_VERSION }}-android
          
      - name: Install Qt
        if: steps.cache-qt.outputs.cache-hit != 'true'
        run: |
          aqt install-qt \
            mac android ${{ env.QT_VERSION }} android_arm64_v8a \
            -m qtsensors qtconnectivity qt5compat qtmultimedia qtpositioning qtshadertools \
            -O ${{ github.workspace }}/Qt
            
          aqt install-qt \
            mac android ${{ env.QT_VERSION }} android_armv7 \
            -m qtsensors qtconnectivity qt5compat qtmultimedia qtpositioning qtshadertools \
            -O ${{ github.workspace }}/Qt
        
          aqt install-qt \
            mac desktop ${{ env.QT_VERSION }} \
            -m qtsensors qtconnectivity qt5compat qtmultimedia qtpositioning qtshadertools \
            -O ${{ github.workspace }}/Qt
          
          ls -la ${{ github.workspace }}/Qt/${{ env.QT_VERSION }}
          
       # Android SDK & NDK
      - uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: ${{ env.NDK_VERSION_FULL }}
          add-to-path: true

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
         java-version: ${{ env.JDK_VERSION }}
         distribution: zulu

      - name: Setup Android SDK
        uses: malinskiy/action-android/install-sdk@release/0.1.2

      - name: Install Android Tools
        run: |
          sdkmanager --licenses && sdkmanager --verbose "platforms;${SDK_PLATFORM}" "build-tools;${SDK_BUILD_TOOLS}" tools platform-tools

      # Input SDK
      - name: Cache Input-SDK
        id: cache-input-sdk
        uses: pat-s/always-upload-cache@v2.1.5
        with:
          path: ${{ github.workspace }}/input-sdk
          key: ${{ runner.os }}-input-sdk-v0-${{ env.INPUT_SDK_VERSION }}-${{ env.CACHE_VERSION }}

      - name: Install Input-SDK
        if: steps.cache-input-sdk.outputs.cache-hit != 'true'
        run: |
          wget -O \
            input-sdk.tar.gz \
            https://github.com/MerginMaps/input-sdk/releases/download/${{ env.INPUT_SDK_VERSION }}/input-sdk-qt-${{ env.QT_VERSION }}-${{ env.INPUT_SDK_VERSION }}.tar.gz
          mkdir -p ${{ github.workspace }}/input-sdk
          cd ${{ github.workspace }}/input-sdk
          tar -xvzf ${{ github.workspace }}/input-sdk.tar.gz
          ls ${{ github.workspace }}/input-sdk

      - name: Extract Mergin API_KEY
        env:
          MERGINSECRETS_DECRYPT_KEY: ${{ secrets.MERGINSECRETS_DECRYPT_KEY }}
        run: |
          cd core/
          /usr/local/opt/openssl@1.1/bin/openssl \
              aes-256-cbc -d \
              -in merginsecrets.cpp.enc \
              -out merginsecrets.cpp \
              -k "$MERGINSECRETS_DECRYPT_KEY" \
              -md md5

      - name: Extract GPS keystore
        env:
          INPUTKEYSTORE_DECRYPT_KEY: ${{ secrets.INPUTKEYSTORE_DECRYPT_KEY }}

        run: |
          /usr/local/opt/openssl@1.1/bin/openssl \
           aes-256-cbc -d \
           -in Input_keystore.keystore.enc \
           -out Input_keystore.keystore \
           -k $INPUTKEYSTORE_DECRYPT_KEY \
           -md md5

      # Build Input App
      - name: Export app/config.pri
        run: |
          touch ./app/config.pri
          echo -e "android {"  >> ./app/config.pri
          echo -e "  INPUT_SDK_PATH=${{ github.workspace }}/input-sdk"  >> ./app/config.pri
          echo -e "  QGIS_QUICK_DATA_PATH = INPUT"  >> ./app/config.pri
          echo -e "  QMAKE_CXX = ccache \$\$QMAKE_CXX "  >> ./app/config.pri
          echo -e "}"  >> ./app/config.pri
          cat ./app/config.pri

      - name: Calculate build number
        env:
          OFFFSET: 10 # offset for build number - due to previous builds ~ new builds must always have a higher number
        run: |
            BUILD_NUM=$GITHUB_RUN_NUMBER$((GITHUB_RUN_ATTEMPT + OFFFSET))
            echo "CI_VERSION_CODE=${BUILD_NUM}" >> $GITHUB_ENV

            echo "Build number: ${BUILD_NUM}"

      - name: Build Input
        env:
          ANDROID_NDK_ROOT: ${{ steps.setup-ndk.outputs.ndk-path }}
          ANDROID_NDK_HOST: darwin-x86_64
          QT_BASE: ${{ github.workspace }}/Qt/${{ env.QT_VERSION }}

        run: |
            # mkdir -p ${{ github.workspace }}/install-Input
            mkdir -p ${{ github.workspace }}/build-Input
            cd ${{ github.workspace }}/build-Input
            
            cmake \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_CXX_FLAGS_RELEASE=-g0 \
              -DQT_ANDROID_ABIS="armeabi-v7a;arm64-v8a" \
              -DQT_PATH_ANDROID_ABI_armeabi-v7a="$QT_BASE/android_armv7" \
              -DQT_PATH_ANDROID_ABI_arm64-v8a="$QT_BASE/android_arm64_v8a" \
              -DCMAKE_FIND_ROOT_PATH:PATH="$ANDROID_NDK" \
              -DINPUT_SDK_PATH=${{ github.workspace }}/input-sdk/arm64-v8a \
              -DANDROID_NDK=$ANDROID_NDK \
              -DANDROID_SDK_ROOT=$ANDROID_SDK_ROOT \
              -DANDROID_PLATFORM=android-$ANDROIDAPI \
              -DANDROID=ON \
              -DANDROID_STL=c++_shared \
              -DQT_HOST_PATH=$QT_BASE/macos \
              -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK}/build/cmake/android.toolchain.cmake \
              -DUSE_SERVER_API_KEY=FALSE \
              -GNinja \
              -S ../input/
              -B ./
            
            ninja apk
            ninja aab

      - name: Rename build artefacts
        run: |
          cd ${{ github.workspace }}/build-apk-arm64-v8a/build-input-apk/out/build/outputs/apk/release
          mv out-release-signed.apk `echo merginmaps-v8-$CI_VERSION_CODE.apk`
          
          cd ${{ github.workspace }}/build-apk-armeabi-v7a/build-input-apk/out/build/outputs/apk/release/
          mv out-release-signed.apk `echo merginmaps-v7a-$CI_VERSION_CODE.apk`

      - name: Upload v8 APK to Artifacts
        uses: actions/upload-artifact@v2
        with:
          path: ${{ github.workspace }}/build-apk-arm64-v8a/build-input-apk/out/build/outputs/apk/release/merginmaps-v8-${{ env.CI_VERSION_CODE }}.apk
          name: arm64 apk

      - name: Upload v7 APK to Artifacts
        uses: actions/upload-artifact@v2
        with:
          path: ${{ github.workspace }}/build-apk-armeabi-v7a/build-input-apk/out/build/outputs/apk/release/merginmaps-v7a-${{ env.CI_VERSION_CODE }}.apk
          name: armeabi apk

      - name: Build AAB
        if: ${{ github.ref_name == 'master' || github.ref_type == 'tag' }}
        env:
          ARCH: 'armeabi-v7a arm64-v8a'
          ANDROID_NDK_ROOT: ${{ steps.setup-ndk.outputs.ndk-path }}
          ANDROID_NDK_HOST: darwin-x86_64
          QT_BASE: ${{ github.workspace }}/Qt/${{ env.QT_VERSION }}/android_arm64_v8a
          QT_NATIVE_BASE: ${{ github.workspace }}/Qt/${{ env.QT_VERSION }}/macos
          SOURCE_DIR: ${{ github.workspace }}

        run: |
            pwd
            echo "Version code: ${{env.CI_VERSION_CODE}}"
            mkdir -p ${{ github.workspace }}/build-aab
            cd ${{ github.workspace }}/build-aab
            ../scripts/android-aab.bash

      - name: Upload AAB to Artifacts
        if: ${{ github.ref_name == 'master' || github.ref_type == 'tag' }}
        uses: actions/upload-artifact@v2
        with:
          path: ${{ github.workspace }}/build-aab/build-input-aab/out/build/outputs/bundle/release/out-release.aab
          name: aab bundle
