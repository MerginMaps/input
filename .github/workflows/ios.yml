name: Input iOS build
on: [push, pull_request]
env:
  QT_VERSION: 5.14.2
  SDK_VERSION: 4

jobs:
  mac_os_build:
    if: github.repository == 'lutraconsulting/input'
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install brew deps
        run: brew install gnupg

      - name: Setup provisioning profile
        env:
          IOS_GPG_KEY: ${{ secrets.IOS_GPG_KEY }}
          IOS_CERT_KEY: ${{ secrets.IOS_CERT_KEY }}
          IOS_PROVISIONING_PROFILE_UUID: ${{ secrets.IOS_PROVISIONING_PROFILE_UUID }}
        run: |
          gpg --quiet --batch --yes --decrypt --passphrase="$IOS_GPG_KEY" --output ./.github/secrets/ios/LutraConsultingLtdInputAppStore.mobileprovision ./.github/secrets/ios/LutraConsultingLtdInputAppStore.mobileprovision.gpg
          gpg --quiet --batch --yes --decrypt --passphrase="$IOS_GPG_KEY" --output ./.github/secrets/ios/Certificates_ios_dist.p12 ./.github/secrets/ios/Certificates_ios_dist.p12.gpg
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp ./.github/secrets/ios/LutraConsultingLtdInputAppStore.mobileprovision "~/Library/MobileDevice/Provisioning Profiles/${IOS_PROVISIONING_PROFILE_UUID}.mobileprovision"
          security create-keychain -p "" build.keychain
          security import ./.github/secrets/ios/Certificates_ios_dist.p12 -t agg -k ~/Library/Keychains/build.keychain -P "$IOS_CERT_KEY" -A
          security list-keychains -s ~/Library/Keychains/build.keychain
          security default-keychain -s ~/Library/Keychains/build.keychain
          security unlock-keychain -p "" ~/Library/Keychains/build.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "" ~/Library/Keychains/build.keychain

      - name: download and install input-sdk
        run: |
          DOWNLOAD_DIR=`pwd`
          curl -k -Lo $DOWNLOAD_DIR/input-sdk-${SDK_VERSION}.tar.gz "https://www.dropbox.com/s/0hfjybth4zxko7f/input-sdk-ios-${SDK_VERSION}.tar.gz?dl=0"
          mkdir -p /opt/INPUT/input-sdk-${SDK_VERSION}
          cd /opt/INPUT/input-sdk-${SDK_VERSION}
          tar -xvzf $DOWNLOAD_DIR/input-sdk-${SDK_VERSION}.tar.gz
          mv /opt/INPUT/input-sdk-${SDK_VERSION}/arm64 /opt/INPUT/input-sdk-${SDK_VERSION}/stage

      - name: download and install qt
        run: |
          DOWNLOAD_DIR=`pwd`
          curl -k -Lo $DOWNLOAD_DIR/qt-${QT_VERSION}-ios.tar.gz "https://www.dropbox.com/s/whdez6vfckulgxu/qt-${QT_VERSION}-ios.tar.gz?dl=0"
          mkdir -p /opt/Qt/${QT_VERSION}/ios
          cd /opt/Qt/${QT_VERSION}/ios
          tar -xvzf $DOWNLOAD_DIR/qt-${QT_VERSION}-ios.tar.gz

      - name: create build system with qmake
        env:
          IOS_PROVISIONING_PROFILE_TEAM_ID: ${{ secrets.IOS_PROVISIONING_PROFILE_TEAM_ID }}
          IOS_PROVISIONING_PROFILE_UUID: ${{ secrets.IOS_PROVISIONING_PROFILE_UUID }}
        run: |
          INPUT_DIR=`pwd`

          # setup config environmen
          cp scripts/ci/config.pri app/config.pri

          mkdir -p ../build-INPUT
          cd ../build-INPUT

          # run qmake
          /opt/Qt/${QT_VERSION}/ios/bin/qmake \
            ${INPUT_DIR}/app/input.pro \
            -spec macx-ios-clang \
            CONFIG+=release \
            CONFIG+=iphoneos \
            CONFIG+=device \
            CONFIG+=qtquickcompiler \
            QMAKE_MAC_XCODE_SETTINGS+=qprofile \
            qprofile.name=PROVISIONING_PROFILE_SPECIFIER \
            qprofile.value="${IOS_PROVISIONING_PROFILE_UUID}" \
            QMAKE_MAC_XCODE_SETTINGS+=qteam \
            qteam.name=DEVELOPMENT_TEAM \
            qteam.value="${IOS_PROVISIONING_PROFILE_TEAM_ID}"

      - name: build Input
        run: |
          INPUT_DIR=`pwd`
          cd ../build-INPUT

          xcodebuild \
            -project Input.xcodeproj/ \
            -scheme Input \
            -sdk iphoneos \
            -configuration Release \
            -archivePath \
            $PWD/Input.xcarchive \
            clean archive

      - name: export .ipa
        run: |
          INPUT_DIR=`pwd`
          cd ../build-INPUT

          xcodebuild \
            -archivePath $PWD/Input.xcarchive \
            -exportOptionsPlist $INPUT_DIR/scripts/ci/ios/exportOptions.plist \
            -exportPath $PWD \
            -allowProvisioningUpdates \
            -exportArchive

      - name: upload .ipa to dropbox
        env:
          INPUTAPP_BOT_GITHUB_TOKEN: ${{ secrets.INPUTAPP_BOT_GITHUB_TOKEN }}
          INPUTAPP_BOT_DROPBOX_TOKEN: ${{ secrets.INPUTAPP_BOT_DROPBOX_TOKEN }}
        if: success()
        run: |
          INPUT_DIR=`pwd`
          cd ../build-INPUT

          ls -la *.ipa

